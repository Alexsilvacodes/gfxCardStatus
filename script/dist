#!/bin/bash

set -eo pipefail

# ================================================================================
#
# Some extremely helpful documentation:
# - https://developer.apple.com/forums/thread/126901
# - https://developer.apple.com/forums/thread/128166
# - https://developer.apple.com/documentation/xcode/notarizing_macos_software_before_distribution/resolving_common_notarization_issues
# - https://developer.apple.com/documentation/xcode/notarizing_macos_software_before_distribution/customizing_the_notarization_workflow
# - https://developer.apple.com/documentation/xcode/notarizing_macos_software_before_distribution/customizing_the_notarization_workflow/customizing_the_xcode_archive_process
# ================================================================================

PROJECT_NAME="gfxCardStatus"
AC_USERNAME="cody@krieger.io"
AC_PASSWORD="@keychain:AC_PASSWORD"
TEAM_ID="LF22FTQC25"
BUILD_DIR="$(pwd)/build"
EXPORT_PATH="$BUILD_DIR/export"
APP_PATH="$EXPORT_PATH/$PROJECT_NAME.app"

echo "----> cleaning..."
rm -rf "$BUILD_DIR"

echo "----> building..."
xcodebuild -workspace gfxCardStatus.xcworkspace \
    -scheme gfxCardStatus \
    archive \
    EXPORT_PATH="$EXPORT_PATH"

VERSION="$(defaults read "$APP_PATH/Contents/Info.plist" CFBundleShortVersionString)"
BUILD_VERSION="$(defaults read "$APP_PATH/Contents/Info.plist" CFBundleVersion)"
BUNDLE_IDENTIFIER="$(defaults read "$APP_PATH/Contents/Info.plist" CFBundleIdentifier)"
ZIP_PATH="$EXPORT_PATH/$PROJECT_NAME-$VERSION.zip"

echo "----> zipping app..."
ditto -ck --keepParent "$APP_PATH" "$ZIP_PATH"

echo "----> zipped: $ZIP_PATH"

# FIXME: --output-format xml/json, parse for status + uuid
echo "----> submitting archive for notarization..."
xcrun altool \
    --username "$AC_USERNAME" \
    --password "$AC_PASSWORD" \
    --output-format xml \
    --notarize-app \
    --primary-bundle-id "$BUNDLE_IDENTIFIER" \
    --team-id "$TEAM_ID" \
    --file "$ZIP_PATH"

# FIXME: Print command that can be run to check status:
# xcrun altool -u "cody@krieger.io" -p "@keychain:AC_PASSWORD" --notarization-info <UUID>

SIZE=$(stat -f %z "$ZIP_PATH")
PUBDATE=$(LC_TIME=en_US date +"%a, %d %b %G %T %z")
DOWNLOAD_URL="$DOWNLOAD_BASE_URL/$(basename $ZIP_PATH)"

echo "----> signing archive (dsa)..."
DSA_SIGNATURE="$(script/sign_update_dsa "$ZIP_PATH" "$PWD/dsa_priv.pem")"
[ $DSA_SIGNATURE ] || { echo "DSA signing failed (unable to load private key?)"; false; }

echo "----> signing archive (ed25519)..."
ED25519_SIGNATURE="$(script/sign_update "$ZIP_PATH" | sed -E 's/^sparkle:edSignature="(.+)" length=".*"$/\1/g')"
[ $ED25519_SIGNATURE ] || { echo "Ed25519 signing failed"; false; }

echo -e "----> done! drop this into the relevant appcast(s):\n"

cat <<EOF
<item>
  <title>Version $VERSION</title>
  <sparkle:releaseNotesLink>
    $RELEASENOTES_URL
  </sparkle:releaseNotesLink>
  <pubDate>$PUBDATE</pubDate>
  <sparkle:minimumSystemVersion>$DEPLOYMENT_TARGET</sparkle:minimumSystemVersion>
  <enclosure url="$DOWNLOAD_URL"
    sparkle:version="$BUILD_VERSION"
    sparkle:shortVersionString="$VERSION"
    type="application/octet-stream"
    length="$SIZE"
    sparkle:dsaSignature="$DSA_SIGNATURE"
    sparkle:edSignature="$ED25519_SIGNATURE" />
</item>
EOF
