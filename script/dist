#!/bin/bash

set -eo pipefail

# ================================================================================
#
# Some extremely helpful documentation:
# - https://developer.apple.com/forums/thread/126901
# - https://developer.apple.com/forums/thread/128166
# - https://developer.apple.com/documentation/xcode/notarizing_macos_software_before_distribution/resolving_common_notarization_issues
# - https://developer.apple.com/documentation/xcode/notarizing_macos_software_before_distribution/customizing_the_notarization_workflow
# - https://developer.apple.com/documentation/xcode/notarizing_macos_software_before_distribution/customizing_the_notarization_workflow/customizing_the_xcode_archive_process
# ================================================================================

PROJECT_NAME="gfxCardStatus"
AC_USERNAME="cody@krieger.io"
AC_PASSWORD="@keychain:AC_PASSWORD"
TEAM_ID="LF22FTQC25"
BUILD_DIR="$(pwd)/build"
EXPORT_PATH="$BUILD_DIR/export"
APP_PATH="$EXPORT_PATH/$PROJECT_NAME.app"

if grep -q -m1 -E "MARKETING_VERSION = ([0-9.]+)b[0-9]" gfxCardStatus.xcodeproj/project.pbxproj ; then
    SU_FEED_CHANNEL_DEFAULT="beta"
else
    SU_FEED_CHANNEL_DEFAULT="release"
fi

SU_FEED_CHANNEL="${SU_FEED_CHANNEL:-$SU_FEED_CHANNEL_DEFAULT}"

echo "----> cleaning..."
rm -rf "$BUILD_DIR"

echo "----> building..."
xcodebuild -workspace gfxCardStatus.xcworkspace \
    -scheme gfxCardStatus \
    archive \
    EXPORT_PATH="$EXPORT_PATH" \
    SU_FEED_CHANNEL="$SU_FEED_CHANNEL"

VERSION="$(defaults read "$APP_PATH/Contents/Info.plist" CFBundleShortVersionString)"
BUILD_VERSION="$(defaults read "$APP_PATH/Contents/Info.plist" CFBundleVersion)"
BUNDLE_IDENTIFIER="$(defaults read "$APP_PATH/Contents/Info.plist" CFBundleIdentifier)"
DEPLOYMENT_TARGET="$(defaults read "$APP_PATH/Contents/Info.plist" LSMinimumSystemVersion)"
ZIP_PATH="$EXPORT_PATH/$PROJECT_NAME-$VERSION.zip"

echo "----> zipping app..."
ditto -ck --keepParent "$APP_PATH" "$ZIP_PATH"

echo "----> zipped: $ZIP_PATH"

NOTARIZE_APP_LOG=$(mktemp -t notarize-app)
NOTARIZATION_INFO_LOG=$(mktemp -t notarization-info)

finish() {
	rm "$NOTARIZE_APP_LOG" "$NOTARIZATION_INFO_LOG"
}
trap finish EXIT

echo "----> submitting archive for notarization..."
if ! xcrun altool \
    --username "$AC_USERNAME" \
    --password "$AC_PASSWORD" \
    --notarize-app \
    --primary-bundle-id "$BUNDLE_IDENTIFIER" \
    --team-id "$TEAM_ID" \
    --file "$ZIP_PATH" > "$NOTARIZE_APP_LOG" 2>&1 ; then

    cat "$NOTARIZE_APP_LOG" 1>&2
    exit 1
fi

cat "$NOTARIZE_APP_LOG" 1>&2
REQUEST_UUID=$(awk -F ' = ' '/RequestUUID/ {print $2}' "$NOTARIZE_APP_LOG")

echo "----> polling notarization status every 60s..."
while sleep 60 && date ; do
    if ! xcrun altool \
        --username "$AC_USERNAME" \
        --password "$AC_PASSWORD" \
        --notarization-info "$REQUEST_UUID" > "$NOTARIZATION_INFO_LOG" 2>&1 ; then

        cat "$NOTARIZATION_INFO_LOG" 1>&2
        exit 1
    fi

    grep "Status: " "$NOTARIZATION_INFO_LOG" ||:

    if ! grep -q "Status: in progress" "$NOTARIZATION_INFO_LOG" ; then
        cat "$NOTARIZATION_INFO_LOG" 1>&2

        echo "----> stapling notarization ticket to $APP_PATH..."
        if ! xcrun stapler staple "$APP_PATH" ; then
            echo "----> FATAL: couldn't staple notarization ticket to $APP_PATH"
            exit 1
        else
            echo "----> notarization ticket stapled successfully"
        fi

        break
    fi
done

echo "----> re-zipping stapled app..."
rm "$ZIP_PATH"
ditto -ck --keepParent "$APP_PATH" "$ZIP_PATH"

SIZE=$(stat -f %z "$ZIP_PATH")
PUBDATE=$(LC_TIME=en_US date +"%a, %d %b %G %T %z")
BASE_URL="https://gfx.io"
RELEASENOTES_URL="$BASE_URL/release-notes/$VERSION.html"
DOWNLOAD_URL="https://github.com/codykrieger/gfxCardStatus/releases/download/v$VERSION/$(basename $ZIP_PATH)"

echo "----> signing archive (dsa)..."
DSA_SIGNATURE="$(script/sign_update_dsa "$ZIP_PATH" "$PWD/dsa_priv.pem")"
[ $DSA_SIGNATURE ] || { echo "DSA signing failed (unable to load private key?)"; false; }

echo "----> signing archive (ed25519)..."
ED25519_SIGNATURE="$(script/sign_update "$ZIP_PATH" | sed -E 's/^sparkle:edSignature="(.+)" length=".*"$/\1/g')"
[ $ED25519_SIGNATURE ] || { echo "Ed25519 signing failed"; false; }

echo -e "----> done! drop this into the relevant appcast(s):\n"

cat <<EOF
<item>
  <title>Version $VERSION</title>
  <sparkle:releaseNotesLink>
    $RELEASENOTES_URL
  </sparkle:releaseNotesLink>
  <pubDate>$PUBDATE</pubDate>
  <sparkle:minimumSystemVersion>$DEPLOYMENT_TARGET</sparkle:minimumSystemVersion>
  <enclosure url="$DOWNLOAD_URL"
    sparkle:version="$BUILD_VERSION"
    sparkle:shortVersionString="$VERSION"
    type="application/octet-stream"
    length="$SIZE"
    sparkle:dsaSignature="$DSA_SIGNATURE"
    sparkle:edSignature="$ED25519_SIGNATURE" />
</item>
EOF
